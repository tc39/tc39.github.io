{
  "proposal-regexp-legacy-features": {
    "title": "Застарілі можливості RegExp в JavaScript",
    "description": "Чернетка специфікації для застарілих можливостей RegExp в JavaScript, тобто статичних властивостей конструктора виду RegExp.$1, а також методу RegExp.prototype.compile."
  },
  "proposal-hashbang": {
    "title": "Граматика Hashbang",
    "description": "Це пропозиція щодо стандартизації використання Shebang / Hashbang відповідно до того, як вони фактично вже використовуються в деяких CLI-середовищах JS. Наразі такі середовища видаляють Shebang для того, щоб згенерувати валідний вихідний код на JS перед тим, як передати його на виконання JS-двигунам. Ця пропозиція дозволить уніфікувати та стандартизувати таке використання."
  },
  "proposal-atomics-wait-async": {
    "title": "<code>Atomics.waitAsync</code>",
    "description": "Пропозиція щодо додавання атомарної операції очікування асинхронної операції в ECMAScript, перш за все, для використання в агентах, в яких неможлива блокування."
  },
  "proposal-relative-indexing-method": {
    "title": "<code>.at()</code>",
    "description": "Пропозиція щодо додавання методу <code>.at()</code> в усі основні індексовані класи (такі як: <code>Array</code>, <code>String</code>, <code>TypedArray</code>)."
  },
  "proposal-import-assertions": {
    "title": "Import assertions",
    "description": "Пропозиція щодо додавання синтаксису для імпорту модулів ES з додатковими твердженнями."
  },
  "proposal-json-modules": {
    "title": "JSON Modules",
    "description": "Пропозиція щодо імпорту JSON-файлів як модулів."
  },
  "proposal-private-fields-in-in": {
    "title": "Егрономічні Brand Checks",
    "description": "Пропозиція про надання можливості перевірки наявності приватного поля без кидання виключень"
  },
  "proposal-class-static-block": {
    "title": "Class Static Block",
    "description": "Статичні блоки класу надають механізм для виконання додаткових ініціалізацій під час обчислення дефініції класу. Ця пропозиція не є заміщенням для публічних полів, оскільки вони надають корисну інформацію для інтрументів статичного аналізу та є валідним таргетом для декораторів. Натомість, ця пропозиція призначена для доповнення пркатичних випадків та забезпечення нових, котрі наразі не покриваюится цією пропозицією."
  },
  "proposal-error-cause": {
    "title": "Нове поле класу Error, під назвою cause",
    "description": "Помилки створюються для вираження аномалій під час виконання програми. Щоб допомогти в діагностиці неочікуваної поведінки, помилки потрібно доповнити контекстною інформацією, такою як повідомлення про помилку, властивості екземпляра помилки, щоб пояснити, що сталося в цей час. Якщо помилка була викликана з глибоких внутрішніх методів, викликана помилка може бути не такою простою для розуміння без належного шаблону обробки виключень. Ця пропозиція вводить зручний спосіб передачі причини (cause)."
  },
  "proposal-temporal": {
    "title": "Temporal",
    "description": "Клас Date був давньою проблемою в ECMAScript. Ця пропозиція вводить Temporal - глобальний об'єкт, який діє як простір імен (як Math), що приносить сучасний API для роботи з датою та часом у мову ECMAScript. Для детального розбору мотивації - дивіться файл readme пропозиції."
  },
  "proposal-accessible-object-hasownproperty": {
    "title": "Доступний Object.prototype.hasOwnProperty()",
    "description": "Пропозиція щодо додавання методу Object.hasOwn(), який робить Object.prototype.hasOwnProperty() більш доступним."
  },
  "proposal-resizablearraybuffer": {
    "title": "Масиви ArrayBuffer, що змінюються та розширюються на місці",
    "description": "ArrayBuffer-и забезпечили комфортну роботу із бінарними даними у пам'яті та користуються великим успіхом. Ця пропозиція розширює конструктори ArrayBuffer, додаючи додатковий параметр - максимальну довжину, яка дозволяє змінювати розмір буферів на місці. Аналогічно, SharedArrayBuffer розширюється додаванням додаткової максимальної довжини, що дозволяє змінювати розмір на місці. Метод transfer також переосмислюється у цій пропозиції, так як це стандартний спосіб від'єднання ArrayBuffer, виконання переміщень без копіювання та \"фіксації\" екземплярів resizable ArrayBuffer до екземплярів ArrayBuffer."
  },
  "proposal-array-find-from-last": {
    "title": "Array.prototype.findLast and Array.prototype.findLastIndex",
    "description": "Пропозиція щодо введення методу для пошуку відповідного елементу чи індексу з кінця масиву."
  },
  "proposal-shadowrealm": {
    "title": "ShadowRealm API",
    "description": "ShadowRealms — це окреме глобальне середовище зі своїм глобальним об'єктом, інтристиками та вбудованими об'єктами (стандартні об'єкти, які не прив'язані до глобальних змінних, таких як початкове значення Object.prototype)."
  },
  "proposal-array-grouping": {
    "title": "Array Grouping",
    "description": "Пропозиція щодо того, як зробити групування масивів простішим."
  }
}
