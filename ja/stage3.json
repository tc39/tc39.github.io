{
  "proposal-regexp-legacy-features": {
    "title": "Legacy RegExp features in JavaScript",
    "description": "JavaScriptの古い(非推奨の)正規表現機能の仕様ドラフトです。例えば、<code>RegExp.$1</code>や<code>RegExp.prototype.compile</code>メソッドのようなコンストラクタのスタティックプロパティなどです。"
  },
  "proposal-hashbang": {
    "title": "Hashbang Grammar",
    "description": "このプロポーザルは、シェバン/ハッシュバンに対応しているいくつかのCLI JSのホストでデファクトとなっている使用方法と合わせるものです。それらのホストは現在、JSエンジンにソーステキストを渡す前にそれらを有効なものにするためにハッシュバンを取り除いています。これはそれがどのように行われるかを統一、また標準化します。"
  },
  "proposal-atomics-wait-async": {
    "title": "<code>Atomics.waitAsync</code>",
    "description": "主にブロッキングが許されないエージェントで使用するための\"<code>Atomics.wait</code>の非同期版\"をECMAScriptに追加するためのプロポーザルです。"
  },
  "proposal-relative-indexing-method": {
    "title": "<code>.at()</code>",
    "description": "すべての基本的なインデックス可能なクラス(<code>Array</code>, <code>String</code>, <code>TypedArray</code>)に、<code>.at()</code>メソッドを追加するプロポーザルです。"
  },
  "proposal-import-assertions": {
    "title": "Import Assertions",
    "description": "ES Modulesをアサーション付きでインポートする構文のためのプロポーザルです。"
  },
  "proposal-json-modules": {
    "title": "JSON Modules",
    "description": "JSONファイルをモジュールとしてインポートするためのプロポーザルです。"
  },
  "proposal-private-fields-in-in": {
    "title": "Ergonomic Brand Checks",
    "description": "例外なしにブランドチェックを実現するためのプロポーザルです。"
  },
  "proposal-class-static-block": {
    "title": "Class Static Block",
    "description": "Class static blockは、クラス定義の評価中に追加の静的初期化を実行する仕組みを提供します。これは、静的解析ツールに役立つ情報を提供し、デコレーターのための妥当なターゲットであるため、パブリックフィールドの置き換えを意図したものではありません。むしろ、これは既存のユースケースを補強し、このプロポーザルで現在処理されていない新しいユースケースを実現できるようにすることを目的としています。"
  },
  "proposal-error-cause": {
    "title": "Error Cause",
    "description": "エラーは、実行時の異常を表現するために作られます。予期しない動作の診断を容易にするためは、エラーメッセージやエラーインスタンスのプロパティなど、その時点で何が起こったかを明らかにする状況情報をエラーに追加する必要があります。エラーが内部の深いメソッドからスローされた場合、スローされたエラーは、適切な例外設計パターンなしに簡単に処理できるとは限りません。このプロポーザルは原因を伝達するための便利な手段を導入します。"
  },
  "proposal-temporal": {
    "title": "Temporal",
    "description": "ECMAScriptでは、Dateが長年の悩みの種でした。そこで提案されたのがTemporalであり、これは(Mathのような)トップレベルの名前空間として振る舞い、ECMAScriptに最新のdate/time APIをもたらすグローバルオブジェクトです。動機の詳しい説明については、プロポーザルのREADMEをご覧ください。"
  },
  "proposal-accessible-object-hasownproperty": {
    "title": "Accessible Object.prototype.hasOwnProperty()",
    "description": "よりObject.prototype.hasOwnProperty()を利用しやすくするためのObject.hasOwn()のプロポーザルです。"
  },
  "proposal-resizablearraybuffer": {
    "title": "In-Place Resizable and Growable ArrayBuffers",
    "description": "ArrayBufferは、バイナリデータをインメモリで処理できるようにし、大きな成功を収めました。このプロポーザルは、ArrayBufferコンストラクタを拡張することで、バッファのインプレースの拡張と縮小が可能な最大長を新たに受け取れるようにします。同様に、SharedArrayBufferは、インプレースの拡張が可能な最大長を新たに受け取れるように拡張されています。transferメソッドは、ArrayBufferをデタッチし、ゼロコピーによる移動を行い、リサイズ可能なArrayBufferインスタンスをArrayBufferインスタンスとして「固定」するための標準的な方法としてもここで再導入されています。"
  },
  "proposal-array-find-from-last": {
    "title": "Array.prototype.findLast and Array.prototype.findLastIndex",
    "description": "与えられた要素、もしくは添字を配列の末尾から検索するメソッドを追加するためのプロポーザルです。"
  },
  "proposal-array-grouping": {
    "title": "Array Grouping",
    "description": "配列の要素のグルーピングを容易に行うメソッドを追加するためのプロポーザルです。"
  }
}
